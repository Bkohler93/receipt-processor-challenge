// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: receipts.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createReceipt = `-- name: CreateReceipt :one
INSERT INTO receipts (
    retailer, purchase_date, purchase_time, total, points
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, retailer, purchase_date, purchase_time, total, uuid, points
`

type CreateReceiptParams struct {
	Retailer     string
	PurchaseDate time.Time
	PurchaseTime time.Time
	Total        string
	Points       int32
}

func (q *Queries) CreateReceipt(ctx context.Context, arg CreateReceiptParams) (Receipt, error) {
	row := q.db.QueryRowContext(ctx, createReceipt,
		arg.Retailer,
		arg.PurchaseDate,
		arg.PurchaseTime,
		arg.Total,
		arg.Points,
	)
	var i Receipt
	err := row.Scan(
		&i.ID,
		&i.Retailer,
		&i.PurchaseDate,
		&i.PurchaseTime,
		&i.Total,
		&i.Uuid,
		&i.Points,
	)
	return i, err
}

const getReceipt = `-- name: GetReceipt :one
SELECT id, retailer, purchase_date, purchase_time, total, uuid, points FROM receipts
WHERE id = $1
`

func (q *Queries) GetReceipt(ctx context.Context, id int32) (Receipt, error) {
	row := q.db.QueryRowContext(ctx, getReceipt, id)
	var i Receipt
	err := row.Scan(
		&i.ID,
		&i.Retailer,
		&i.PurchaseDate,
		&i.PurchaseTime,
		&i.Total,
		&i.Uuid,
		&i.Points,
	)
	return i, err
}

const getReceiptByUuid = `-- name: GetReceiptByUuid :one
SELECT id, retailer, purchase_date, purchase_time, total, uuid, points FROM receipts 
WHERE uuid = $1
`

func (q *Queries) GetReceiptByUuid(ctx context.Context, argUuid uuid.UUID) (Receipt, error) {
	row := q.db.QueryRowContext(ctx, getReceiptByUuid, argUuid)
	var i Receipt
	err := row.Scan(
		&i.ID,
		&i.Retailer,
		&i.PurchaseDate,
		&i.PurchaseTime,
		&i.Total,
		&i.Uuid,
		&i.Points,
	)
	return i, err
}
